############################################################## Localization

include file: language

############################################################## Filter BP and SP

# Allow only numbers
bp_filter := filter_text@(match: "^[0123456789]+")

# Allow only numbers and symbols "+" or "-"
sp_filter := filter_text@(match: "^[+-0123456789]+")


############################################################## Determine card type

is_character := { language().is_character(card.super_type) }
is_action    := { language().is_action(card.super_type) }
is_reaction  := { language().is_reaction(card.super_type) }

############################################################## Card number

# Index for sorting, white cards are first, so white->A, blue->B, .. ,
# The code consists of 3 parts:
#   color,  shifted,   split
sort_index := {
	type_of_card() +
	":"
}
# Process the name for sorting rules
sort_name :=
	# Remove "The", "A", and "And" at the beginning
	replace@(match: "^(The|An?) ", replace: "") +
	# Remove commas and apostrophes
	replace@(match: "(,|'|’|;)", replace: "") +
	# Remove bold and italic tags
	replace@(match: "(<b>|<i>|</b>|</i>)", replace: "") +
	# Make lowercase
	to_lower

character_sort := {
	"A:" + card.publisher + ":" + card.team
}

# A code for the type of the card
type_of_card := {
	if      is_character()  then character_sort()          
	else if is_action()     then "B"
	else if is_reaction()   then "C"
	else						 "Z"
}

rarity_sort := {
	if card.shape == "token" then "T"
	else if card.rarity == "S" then " "
	else card.rarity
}
set_filter := {	
	if card.shape == "token" then
		{ card.shape == "token" }
		
	else if is_character() then
		{ is_character() }
		
	else if is_action() then
		{ is_action() }
		
	else if is_reaction() then
		{ is_reaction() }
		
	else
		{ card.shape != "token" }
}

zero_padding_replace := { substring(zeros, begin:length(input))+_1 }
zero_padding := {
	zeros := substring("0000000000", end:pad)
	if length(to_string(input)) < pad then
		replace(match: "(\\d+)", replace: zero_padding_replace, input)
	else
		input
}
pad_3_zeros := zero_padding@(pad:3)

card_number := {
	(
		if      is_character()  then "C"      
		else if is_action()     then "A"
		else if is_reaction()   then "R"
		else						 "Z"
	) +
	(
		cnumber := position (
			of: card
			in: set
			order_by: { sort_index() + sort_name(card.name) }
			filter:   set_filter()
		) + 1
		
		pad_3_zeros(cnumber)
	)
}
card_count := {
	number_of_items(in: set, filter: set_filter())
}

# used by pack scripts
is_token_card   := { card.shape == "token" }


############################################################## Utilities for keywords

# Replace spaces by a spacer
separate_words := remove_tags + trim + replace@(match:" ", replace: {spacer})

# Convert first letter to lower case
alternative_cost := replace@(match:"^[A-Z]", replace: { to_lower() })

long_dash := replace@(match:"-", replace:"—")

# Utilities for keywords
has_bp := { card.bonus_points != "" }
has_sp := { card.soul_points != "" }

contains_target := match@(match:"(?i)([^a-z]|^)target([^a-z]|$)")
is_targeted := { contains_target(card.rule_text) }


############################################################## The text box

# these are considered a correct 'word' for spellchecking in the text box:
additional_text_words := match@(match:
	"(?ix)^(?:                         # match whole word
	  <atom-[^>]*>.*?</atom-[^>]*>     # cardnames and stuff
	)$")

# the rule text filter
text_filter :=
	# step 1 : remove all automatic tags
	remove_tag@(tag: "<sym-auto>") +
	remove_tag@(tag: "<i-auto>")   +
	remove_tag@(tag: "<b-auto>")   +
	remove_tag@(tag: "<error-spelling") +
	remove_tag@(tag: "<nospellcheck") +
	# step 2 : reminder text for keywords
	expand_keywords@(
		condition: {
			correct_case or not used_placeholders
		}
		default_expand: {
			chosen(choice:if correct_case then mode else "lower case", set.automatic_reminder_text)
		},
		combine: {
			keyword  := "<nospellcheck>{keyword}</nospellcheck>"
			reminder := process_english_hints(reminder)
			keyword + if expand then "<atom-reminder-{mode}> ({reminder})</atom-reminder-{mode}>"
		}) +
	# step 2b : remove duplicate reminder text
	replace@(
		match: "(<atom-reminder-[^>]*>[^)]+[)]</atom-reminder-[^>]*>)([^\n]+)\\1"
		replace: "\\2\\1"
		) +
	# step 3a : expand shortcut word CARDNAME
	replace@(
		match: "CARDNAME",
		in_context: "(^|[[:space:]]|\\()<match>",
		replace: "<atom-cardname></atom-cardname>"
		) +
	# step 3b : fill in atom fields
	tag_contents@(
		tag: "<atom-cardname>",
		contents: { "<nospellcheck>" + (if card_name=="" then "CARDNAME" else card_name) + "</nospellcheck>" }
		) +
	#step 5 : add ability symbol and name
	replace@(
		match: "^([|][A-Z]) ([^\\n]+)\\n",
		replace: "<sym-auto>\\1</sym-auto> <b-auto>\\2</b-auto>\\n" ) +
	# step 6 : curly quotes
	curly_quotes +
	# step 7 : italicize text in parenthesis
	replace@(
	 	match: "[(]([^)\n]|[(][^)\n]*[)])*[)]?",
		in_context: "(^|[[:space:]])<match>|<atom-keyword><match></",
	 	replace: "<i-auto>&</i-auto>") +
	# step 8 : automatic capitalization, but not after "("
	replace@(
		match: "([ ]*: |—| — )" # preceded by this
		     + "([[:lower:]])" # match this
		     + "(?![)])",      # not followed by this
		replace: { _1 + to_upper(_2) }) +
	# step 9 : spellcheck
	{ if set.mark_errors then
		check_spelling(
			language: language().spellcheck_code,
			extra_dictionary: "/cfc.mse-game/dictionary"
			extra_match: additional_text_words
		)
	  else input
	}


############################################################## Other boxes

# the flavor text filter
#  - makes all text italic
flavor_text_filter :=
	# step 1 : remove italic tags
	remove_tag@(tag: "<i-flavor>")   +
	# step 2 : surround by <i> tags
	{ "<i-flavor>" + input + "</i-flavor>" } +
	# curly quotes
	curly_quotes +
	# spellcheck
	{ if set.mark_errors
	  then check_spelling(language:language().spellcheck_code)
	  else input
	}

super_type_filter := {
	input := remove_tag(tag: "<word-list-")
	tag := "word-list-type"
	"<{tag}>{input}</{tag}>"
}

break_subtypes := split_text@(match: " +|<atom-sep>[^<]*</atom-sep>", include_empty:false)
sub_type_filter := {
	input := remove_tag(tag: "<word-list-")
	input := remove_tag(tag: "<soft")
	lang  := language()
	# What word list to use?
	list_type := if      is_character()  then "character"
	             else if is_action()     then "action"
	             else if is_reaction()   then "reaction"
	if list_type != "" then (
		# wrap wordlist tag around each part
		parts := break_subtypes()
		(for each i:part in parts do
			lang.subtype_separator + "<word-list-{list_type}>{part}</word-list-{list_type}>"
		) +
		(if length(parts) > 0 then
			# Add a new box at the end
			"<soft>{lang.subtype_separator}</soft><word-list-{list_type}></word-list-{list_type}>"
		 else
			"<word-list-{list_type}></word-list-{list_type}>"
		)
	) else input
}

backup_filter := {
	input := remove_tag(tag: "<word-list-")
	lang  := language()
	list_type := "character"
	# wrap wordlist tag around each part
	parts := break_subtypes()
	(for each i:part in parts do
		lang.subtype_separator + "<word-list-{list_type}>{part}</word-list-{list_type}>"
	) +
	"<word-list-{list_type}></word-list-{list_type}>"
}

# all sub types, for word list
space_to_comma := replace@(match:" ", replace:",")
only_first     := replace@(match:" .*", replace:"")
only_next      := replace@(match:"^[^ ]* ?", replace:"")
all_sub_types := {
	for each card in set do
		if contains(card.super_type) then "," + space_to_comma(to_text(card.sub_type))
}

# team filters
# team_filter := {
# 	input := remove_tag(tag: "<word-list-")
# 	tag := "word-list-team"
# 	"<{tag}>{input}</{tag}>"
# }
# all_teams := {
# 	for each card in set do
# 		if is_character() then
# 			"," + to_text(card.team)
# }

# Shape of cards, can be changed in style files
card_shape := { "normal" }


############################################################## Statistics utilities

only_numbers := filter_text@(match: "^[0123456789]+")

word_count := break_text@(match:"[^[:space:]]+") + length
line_count := split_text@(match:"\n+",include_empty:false) + length
long_space_to_comma := replace@(match: " +", replace: ",")