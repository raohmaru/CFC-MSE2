mse version: 2.0.0
game: cfc
short name: OCTGN
full name: OCTGN set file
installer group: cfc/export/OCTGN
icon: preview.png
file type: *.xml|*.xml|*.*|*.*
create directory: true

version: 2013-09-13
depends on: cfc.mse-game 2013-05-07

############################################################## Card fields

option field:
	type: text
	name: game GUID
	default: "e3d56d9e-900d-49c6-b6ae-22cbb51be153"
	#script: "e3d56d9e-900d-49c6-b6ae-22cbb51be153"
	description: The GUID of the game definition

option field:
	type: text
	name: game version
	default : "1.0.0.0"
	description: The version of the game definition
	
option field:
	type: choice
	name: images
	choice: no
	choice: full card image
	choice: cropped card image
	initial: no

option field:
	type: boolean
	name: alternates
	initial: no

option style:
	images:
		render style: both
		choice images:
			no:                        { built_in_image("bool_no") }
			full card image:           /cfc.mse-game/icons/card-image-full.png
			cropped card image:        /cfc.mse-game/icons/card-image-crop.png
	
############################################################## Script

script:
	ex_is_character := language().is_character@()
	remove_whitespace_chars := replace@(match:"\\s", replace:" ")
	split_by_letter := break_text@(match: ".")
	octgn_text_filter := (
		remove_tags +
		replace@(match:"&", replace:"\\&amp;") +
		replace@(match:"(\")|(“)|(”)", replace:"\\&quot;") +
		replace@(match:"(')|(‘)|(’)", replace:"\\&apos;") +
		replace@(match:"<", replace:"\\&lt;") +
		replace@(match:">", replace:"\\&gt;") +
		replace@(match:"\n", replace:"\\&#xD;\\&#xA;") +
		replace@(match:"[|]I", replace:"\\&#162;") +
		replace@(match:"[|]T", replace:"\\&#163;") +
		replace@(match:"[|]A", replace:"\\&#164;") +
		remove_whitespace_chars +
		to_text +
		trim
	)
	parse_illustrator := filter_text@(match: "\\s+(.*)$", replace: "\\0")
	parse_text := (
		replace@(
			match: "<sym[^>]*>([^<]+)</sym[^>]*> <b[^>]*>([^<]+)</b[^>]*>"
			replace: "\\1  \\2"
		) +
		octgn_text_filter
	)
	pad_5_zeros := zero_padding@(pad:5)
	
	write_fullcard := { write_image_file(file:"Cards/{ guid }{ alt }.jpg", width:516) }@(alt: "")
	write_cropcard := { write_image_file(input.image, file:"Cards/Crops/{ guid }{ alt }.jpg", width:466) }@(alt: "")
	
	card_properties := {
		offset := if alt then "	" else ""
				"
				{ offset }<property name=\"Publisher\" value=\"{ input.publisher }\" />
				{ offset }<property name=\"Team\"      value=\"{ input.team }\" />
				{ offset }<property name=\"Type\"      value=\"{ trim(remove_tags(input.super_type)) }\" />
				{ offset }<property name=\"Subtype\"   value=\"{ trim(remove_tags(input.sub_type)) }\" />
				{ offset }<property name=\"Rarity\"    value=\"{ input.rarity }\" />
				{ offset }<property name=\"Rules\"     value=\"{ if not alt then parse_text(input.rule_text) else ""  }\" />
				{ offset }<property name=\"BP\"        value=\"{ input.bonus_points}\" />
				{ offset }<property name=\"SP\"        value=\"{ input.soul_points }\" />
				{ offset }<property name=\"Backup 1\"  value=\"{ trim(remove_tags(input.backup_1)) }\" />
				{ offset }<property name=\"Backup 2\"  value=\"{ trim(remove_tags(input.backup_2)) }\" />
				{ offset }<property name=\"Backup 3\"  value=\"{ trim(remove_tags(input.backup_3)) }\" />
				{ offset }<property name=\"Number\"    value=\"{ input.card_number }\" />
			"
	}@(alt: false)
	
	# ASCII character map
	char_map := [" ":32,"!":33,"\"":34,"#":35,"$":36,"%":37,"&":38,"'":39,"(":40,")":41,"*":42,"+":43,",":44,"-":45,".":46,"/":47,"0":48,"1":49,"2":50,"3":51,"4":52,"5":53,"6":54,"7":55,"8":56,"9":57,":":58,";":59,"<":60,"=":61,">":62,"?":63,"@":64,"A":65,"B":66,"C":67,"D":68,"E":69,"F":70,"G":71,"H":72,"I":73,"J":74,"K":75,"L":76,"M":77,"N":78,"O":79,"P":80,"Q":81,"R":82,"S":83,"T":84,"U":85,"V":86,"W":87,"X":88,"Y":89,"Z":90,"[":91,"\\":92,"]":93,"^":94,"_":95,"`":96,"a":97,"b":98,"c":99,"d":100,"e":101,"f":102,"g":103,"h":104,"i":105,"j":106,"k":107,"l":108,"m":109,"n":110,"o":111,"p":112,"q":113,"r":114,"s":115,"t":116,"u":117,"v":118,"w":119,"x":120,"y":121,"z":122,"\{":123,"|":124,"\}":125,"~":126,"¡":161,"¢":162,"£":163,"¤":164,"¥":165,"¦":166,"§":167,"¨":168,"©":169,"ª":170,"«":171,"¬":172,"­":173,"®":174,"¯":175,"°":176,"±":177,"²":178,"³":179,"´":180,"µ":181,"¶":182,"·":183,"¸":184,"¹":185,"º":186,"»":187,"¼":188,"½":189,"¾":190,"¿":191,"À":192,"Á":193,"Â":194,"Ã":195,"Ä":196,"Å":197,"Æ":198,"Ç":199,"È":200,"É":201,"Ê":202,"Ë":203,"Ì":204,"Í":205,"Î":206,"Ï":207,"Ð":208,"Ñ":209,"Ò":210,"Ó":211,"Ô":212,"Õ":213,"Ö":214,"×":215,"Ø":216,"Ù":217,"Ú":218,"Û":219,"Ü":220,"Ý":221,"Þ":222,"ß":223,"à":224,"á":225,"â":226,"ã":227,"ä":228,"å":229,"æ":230,"ç":231,"è":232,"é":233,"ê":234,"ë":235,"ì":236,"í":237,"î":238,"ï":239,"ð":240,"ñ":241,"ò":242,"ó":243,"ô":244,"õ":245,"ö":246,"÷":247,"ø":248,"ù":249,"ú":250,"û":251,"ü":252,"ý":253,"þ":254,"ÿ":255,"Œ":338,"œ":339,"Š":352,"š":353,"Ÿ":376,"ƒ":402,"–":8211,"—":8212,"†":8224,"‡":8225,"•":8226,"…":8230,"‰":8240,"€":8364,"™":8482,"‘":8216,"’":8217,"“":8220,"”":8221]
	
	# Generates a GUID from the set GUID plus the card number
	guid_tmpl := substring(set.GUID, begin:0, end:31)
	guid := {
		guid_tmpl + pad_5_zeros(card.card_internal_number)
	}

	# Write a single card
	write_card := {
	card_name := octgn_text_filter(card.name)
	card_guid := guid()
	alternate := options.alternates and length(card.rule_text) > 0 and ex_is_character(card.super_type)
	
	if contains(options.images, match:"full card image") then (
		write_fullcard(card, guid:card_guid)
		if alternate then
			write_fullcard(card, guid:card_guid, alt:".noability")
	) else if options.images == "cropped card image" then (
		write_cropcard(card, guid:card_guid)
		if alternate then
			write_cropcard(card, guid:card_guid, alt:".noability")
	)
		
	
			"<card name=\"{ card_name }\" id=\"{ card_guid }\">"
				+ card_properties(card) +
				(if alternate then
					"	<alternate name=\"{ card_name }\" type=\"noability\">"
					+ card_properties(card, alt: true) +
					"	</alternate>
			"
				) +
			"</card>
			"
	}
	
	# Write all cards of the set
	write_cards := {
		for each card in sort_list(cards, order_by: {type_of_card(card:input) + input.card_number}) do
			write_card()
	}
	
	# Set definition XML
	xml := "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>
	<set name=\"{to_text(curly_quotes(set.title))}\" id=\"{set.GUID}\" version=\"{to_text(set.version)}\" gameId=\"{to_text(options.game_GUID)}\" gameVersion=\"{to_text(options.game_version)}\">
		<packaging>
			<pack name=\"Booster\" id=\"{set.booster_pack_GUID}\">
				<options>
					<option probability=\"0.125\">
						<pick qty=\"1\" key=\"Rarity\" value=\"S\" />
					</option>
					<option probability=\"0.875\">
						<pick qty=\"1\" key=\"Rarity\" value=\"A\" />
					</option>
				</options>
				<pick qty=\"2\" key=\"Rarity\" value=\"B\" />
				<pick qty=\"5\" key=\"Rarity\" value=\"C\" />
				<pick qty=\"7\" key=\"Rarity\" value=\"D\" />
			</pack>
		</packaging>
		<cards>
			{ write_cards(cards: cards) }
		</cards>
	</set>"
	
	write_text_file(xml, file:"set.xml")
	