mse version: 2.0.0
game: cfc
short name: OCTGN
full name: OCTGN set file
installer group: cfc/export/OCTGN
icon: preview.png
file type: *.xml|*.xml|*.*|*.*
create directory: true

version: 2013-09-13
depends on: cfc.mse-game 2013-05-07

############################################################## Card fields

option field:
	type: text
	name: game GUID
	default: "e3d56d9e-900d-49c6-b6ae-22cbb51be153"
	script: "e3d56d9e-900d-49c6-b6ae-22cbb51be153"
	description: The GUID of the game definition

option field:
	type: text
	name: game version
	default : "1.0.0.0"
	description: The version of the game definition
	
option field:
	type: choice
	name: images
	choice: no
	choice: full card image
	choice: cropped card image
	initial: no

option style:
	images:
		render style: both
		choice images:
			no:                        { built_in_image("bool_no") }
			full card image:           /cfc.mse-game/icons/card-image-full.png
			cropped card image:        /cfc.mse-game/icons/card-image-crop.png
	
############################################################## Script

script:
	ex_is_character := language().is_character@()
	remove_whitespace_chars := replace@(match:"\\s", replace:" ")
	split_by_letter := break_text@(match: ".")
	cfc_text_filter := (
		replace@(match:"&", replace:"\\&amp;") +
		replace@(match:"(\")|(“)|(”)", replace:"\\&quot;") +
		replace@(match:"(')|(‘)|(’)", replace:"\\&apos;") +
		replace@(match:"<", replace:"\\&lt;") +
		replace@(match:">", replace:"\\&gt;") +
		replace@(match:"\n", replace:"\\&#xD;\\&#xA;") +
		replace@(match:"[|]I", replace:"\\&#162;") +
		replace@(match:"[|]T", replace:"\\&#163;") +
		replace@(match:"[|]A", replace:"\\&#164;") +
		remove_whitespace_chars +
		to_text +
		trim
	)
	parse_illustrator := filter_text@(match: "\\s+(.*)$", replace: "\\0")
	parse_text := (
		replace@(
			match: ability_rgx,
			replace: ""
		) +
		cfc_text_filter
	)
	pad_5_zeros := zero_padding@(pad:5)
	ability_match  := match@(match: ability_rgx)
	ability_filter := filter_text@(match: ability_rgx) + replace@(match:"\n", replace:"")
	ability_remove := replace@(match: ability_rgx, replace: "")
	ability_get_type := substring@(end:2)
	ability_get_name := substring@(begin:3)
	
	write_fullcard := { write_image_file(file:"Cards/{ guid }{ alt }.png", width:516) }@(alt: "")
	write_cropcard := { write_image_file(input.image, file:"Cards/Crops/{ guid }{ alt }.jpg", width:466) }@(alt: "")
	
	card_properties := {
		rules        := remove_tags(input.rule_text)
		ability      := ""
		ability_type := ""
		ability_name := ""
		if ability_match(rules) then (
			ability      := ability_filter(rules)
			ability_type := cfc_text_filter(ability_get_type(ability))
			ability_name := cfc_text_filter(ability_get_name(ability))
			ability      := cfc_text_filter(ability)
			rules        := ability_remove(rules)
		)
		offset := if alt then "	" else ""
				"
				{ offset }<property name=\"Publisher\"    value=\"{ input.publisher }\" />
				{ offset }<property name=\"Team\"         value=\"{ input.team }\" />
				{ offset }<property name=\"Type\"         value=\"{ trim(remove_tags(input.super_type)) }\" />
				{ offset }<property name=\"Subtype\"      value=\"{ trim(remove_tags(input.sub_type)) }\" />
				{ offset }<property name=\"Rarity\"       value=\"{ input.rarity }\" />
				{ offset }<property name=\"Ability\"      value=\"{ ability }\" />
				{ offset }<property name=\"Ability Type\" value=\"{ ability_type }\" />
				{ offset }<property name=\"Ability Name\" value=\"{ ability_name }\" />
				{ offset }<property name=\"Rules\"        value=\"{ if not alt then cfc_text_filter(rules) else "" }\" />
				{ offset }<property name=\"BP\"           value=\"{ input.bonus_points}\" />
				{ offset }<property name=\"SP\"           value=\"{ input.soul_points }\" />
				{ offset }<property name=\"Backup 1\"     value=\"{ trim(remove_tags(input.backup_1)) }\" />
				{ offset }<property name=\"Backup 2\"     value=\"{ trim(remove_tags(input.backup_2)) }\" />
				{ offset }<property name=\"Backup 3\"     value=\"{ trim(remove_tags(input.backup_3)) }\" />
				{ offset }<property name=\"Number\"       value=\"{ input.card_number }\" />
				{ offset }<property name=\"Illustrator\"  value=\"{ cfc_text_filter(input.illustrator) }\" />
				{ offset }<property name=\"Gid\"          value=\"{ input.card_internal_number }\" />
			"
	}@(alt: false)
	
	# Write a single card
	write_card := {
		card_name := cfc_text_filter(card.name)
	
		if contains(options.images, match:"full card image") then (
			write_fullcard(card, guid:card.name)
		) else if options.images == "cropped card image" then (
			write_cropcard(card, guid:card.guid)
		)
			"<card name=\"{ card_name }\" id=\"{ card.guid }\">"
				+ card_properties(card) +
			"</card>
			"
	}
	
	# Write all cards of the set
	write_cards := {
		for each card in sort_list(cards, order_by: {type_of_card(card:input) + input.card_number}) do
			write_card()
	}
	
	# Set definition XML
	xml := "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>
	<set name=\"{to_text(curly_quotes(set.title))}\" id=\"{set.GUID}\" version=\"{to_text(set.version)}\" gameId=\"{to_text(options.game_GUID)}\" gameVersion=\"{to_text(options.game_version)}\">
		<packaging>
			<pack name=\"Booster\" id=\"{set.booster_pack_GUID}\">
				<options>
					<option probability=\"0.125\">
						<pick qty=\"1\" key=\"Rarity\" value=\"S\" />
					</option>
					<option probability=\"0.875\">
						<pick qty=\"1\" key=\"Rarity\" value=\"A\" />
					</option>
				</options>
				<pick qty=\"2\" key=\"Rarity\" value=\"B\" />
				<pick qty=\"5\" key=\"Rarity\" value=\"C\" />
				<pick qty=\"7\" key=\"Rarity\" value=\"D\" />
			</pack>
		</packaging>
		<cards>
			{ write_cards(cards: cards) }
		</cards>
	</set>"
	
	write_text_file(xml, file:"set.xml")
	